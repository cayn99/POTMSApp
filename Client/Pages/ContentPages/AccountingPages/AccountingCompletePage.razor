@page "/accounting/accountingcomplete"
@implements IDisposable
@if (allState.ShowAccountingComplete)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card shadow-lg border-dark">
                    <div class="card-header">
                        <h4 class="float-start">Approved Requests</h4>
                        <button class="btn btn-success float-end" @onclick="OpenDialog">
                            <i class="bi bi-plus-circle-dotted"></i> Input Details for Approved Request
                        </button>
                    </div>
                    <div class="card-body">
                        @{
                            var Tool = (new List<string>() { "Search" });
                        }
                        <SfGrid DataSource="@AllAccountingComplete" AllowPaging="true" AllowSorting="true" Toolbar=@Tool @ref="DefaultGrid">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridEvents TValue="AccountingComplete"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(PurchaseRequest.PrNumber) HeaderText="PR Number"></GridColumn>
                                <GridColumn Field=@nameof(AccountingComplete.Cancelled) HeaderText="Cancelled"></GridColumn>
                                <GridColumn Field=@nameof(AccountingComplete.Amount) HeaderText="Amount"></GridColumn>
                                <GridColumn Field=@nameof(AccountingComplete.Balance) HeaderText="Balance"></GridColumn>
                                <GridColumn Field=@nameof(AccountingComplete.Penalty) HeaderText="Penalty"></GridColumn>
                                <GridColumn HeaderText="Action">
                                    <Template>
                                        @{
                                            var accountingComplete = (context as AccountingComplete);
                                            <div>
                                                <button type="button" class="btn btn-primary btn-sm" style="text-align: center" @onclick="()=>EditClicked(accountingComplete!)"><i class="bi bi-pencil"></i> Edit </button>
                                                <button type="button" class="btn btn-danger btn-sm" style="text-align: center" @onclick="()=>DeleteClicked(accountingComplete!)"><i class="bi bi-trash"></i> Delete </button>
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>

                    </div>
                    <div class="card-footer">
                    </div>
                </div>
            </div>
        </div>
    </div>


}
<AccountingCompleteDialog @ref="accountingCompleteDialog"
HandleSaveOperationEvent="HandleSaveOperationEvent"
AccountingComplete="AccountingComplete"
AccountingApprovals="AccountingApprovals"
PurchaseRequests="PurchaseRequests" />
@code {
    private SfGrid<AccountingComplete>? DefaultGrid;
    AccountingCompleteDialog? accountingCompleteDialog;
    AccountingComplete AccountingComplete = new();
    public string Title { get; set; } = "Add";
    public List<AccountingComplete> AllAccountingComplete { get; set; } = new();
    public List<AccountingApproval> AccountingApprovals { get; set; } = new();
    public List<PurchaseRequest> PurchaseRequests { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetAllAccountingComplete();
        await GetAccountingApprovals();
        await GetPurchaseRequests();
        allState.Action += StateHasChanged;
    }

    private async Task GetAllAccountingComplete() => AllAccountingComplete = await accountingCompleteService.GetAll(Constants.AccountingCompleteBaseUrl);
    private async Task GetAccountingApprovals() => AccountingApprovals = await accountingApprovalService.GetAll(Constants.AccountingApprovalBaseUrl);
    private async Task GetPurchaseRequests() => PurchaseRequests = await purchaseRequestService.GetAll(Constants.PurchaseRequestBaseUrl);

    void OpenDialog() => accountingCompleteDialog?.OpenDialog();


    private async Task HandleSaveOperationEvent(AccountingComplete accountingComplete)
    {
        bool successCheck = false;
        if (AccountingComplete.Id > 0)
        {
            var result = await accountingCompleteService.Update(accountingComplete, Constants.AccountingCompleteBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await accountingCompleteService.Insert(accountingComplete, Constants.AccountingCompleteBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            AccountingComplete AccountingComplete = new();
            await GetAllAccountingComplete();
            accountingCompleteDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(AccountingComplete accountingComplete)
    {
        accountingCompleteDialog?.ChangeTitle("Update");
        AccountingComplete = accountingComplete;
        OpenDialog();
    }

    private async Task DeleteClicked(AccountingComplete accountingComplete)
    {
        bool confirm = await dialogService.ConfirmAsync($"You are going to delete accounting ID #{accountingComplete.Id}, are you sure?", 
        "Confirm Delete");
        if (!confirm) return;

        var response = await accountingCompleteService.DeleteById(accountingComplete.Id, Constants.PurchaseRequestBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetAccountingApprovals();
            await GetPurchaseRequests();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success!");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged; 
}