@implements IDisposable
@if (allState.ShowPurchaseOrder)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Purchase Orders</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i> Input Purchase Order Details </button>
                    </div>
                    <div class="card-header style=max-height: 580px; overflow-x: hidden; overflow-y: scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col" style="text-align: center">#</th>
                                        <th scope="col" style="text-align: center">Id</th>
                                        <th scope="col" style="text-align: center">Request</th>
                                        <th scope="col" style="text-align: center">Accounting</th>
                                        <th scope="col" style="text-align: center">Delivery</th>
                                        <th scope="col" style="text-align: center">COA</th>
                                        <th scope="col" style="text-align: center">Inspection</th>
                                        <th scope="col" style="text-align: center">Remarks</th>
                                        <th scope="col" style="text-align: center">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (PurchaseOrders is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in PurchaseOrders)
                                        {
                                            <tr>
                                                <th scope="row" style="text-align: center">@count</th>
                                                <td style="text-align: center">@item.Id</td>
                                                <td style="text-align: center">@item.Request!.RecordNumber</td>
                                                <td style="text-align: center">@item.AccountingApproval!.Id</td>
                                                <td style="text-align: center">@item.OrderDelivery!.Id</td>
                                                <td style="text-align: center">@item.Coa!.Id</td>
                                                <td style="text-align: center">@item.Inspection!.Id</td>
                                                <td style="text-align: center">@item.Remarks</td>
                                                <td style="text-align: center">
                                                    <button type="button" class="btn btn-outline-info" @onclick="()=>EditClicked(item)"><i class="bi bi-pencil"></i> Edit </button>
                                                    <button type="button" class="btn btn-outline-danger" @onclick="()=>DeleteClicked(item)"><i class="bi bi-trash"></i> Delete </button>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert-info text-center">No Purchase Order added yet!</div></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<PurchaseOrderDialog @ref="purchaseOrderDialog"
HandleSaveOperationEvent="HandleSaveOperationEvent"
PurchaseOrder="PurchaseOrder"
Requests="Requests"/>
@code {
    PurchaseOrderDialog? purchaseOrderDialog;
    PurchaseOrder PurchaseOrder = new();
    public string Title { get; set; } = "Add";
    public List<Request> Requests { get; set; } = new();
    public List<PurchaseOrder> PurchaseOrders { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetPurchaseOrders();
        await GetRequests();
        allState.Action += StateHasChanged;
    }

    private async Task GetPurchaseOrders()
    {
        PurchaseOrders = await purchaseOrderService.GetAll(Constants.PurchaseOrderBaseUrl);
    }
    private async Task GetRequests()
    {
        Requests = await requestService.GetAll(Constants.RequestBaseUrl);
    }

    void OpenDialog()
    {
        purchaseOrderDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(PurchaseOrder purchaseOrder)
    {
        bool successCheck = false;
        if (PurchaseOrder.Id > 0)
        {
            var result = await purchaseOrderService.Update(purchaseOrder, Constants.PurchaseOrderBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await purchaseOrderService.Insert(purchaseOrder, Constants.PurchaseOrderBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            PurchaseOrder = new();
            await GetPurchaseOrders();
            purchaseOrderDialog?.ChangeTitle("Add");
        }
    }

    void AddButtonClicked()
    {
        purchaseOrderDialog?.ChangeTitle("Add");
        PurchaseOrder = new();
        OpenDialog();
    }

    private void EditClicked(PurchaseOrder purchaseOrder)
    {
        purchaseOrderDialog?.ChangeTitle("Update");
        PurchaseOrder = purchaseOrder;
        OpenDialog();
    }

    private async Task DeleteClicked(PurchaseOrder purchaseOrder)
    {
        bool confirm = await dialogService.ConfirmAsync($"You are going to delete purchase order #{purchaseOrder.Id}, are you sure?", "Confirm Delete");
        if (!confirm) return;

        var response = await purchaseOrderService.DeleteById(purchaseOrder.Id, Constants.RequestBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetRequests();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success!");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
