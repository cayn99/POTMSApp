@page "/user"
@implements IDisposable
@if (allState.ShowUser)
{

    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card shadow-lg border-info">
                    <div class="card-header">
                        <h4 class="float-start">Users</h4>
                    </div>
                    <div class="card-body">
                        @{
                            var Tool = (new List<string>() { "Search", "ExcelExport" });
                        }
                        <SfGrid DataSource="@ManageUsers" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true" @ref="DefaultGrid">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ManageUser"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(ManageUser.FirstName) HeaderText="First Name"></GridColumn>
                                <GridColumn Field=@nameof(ManageUser.LastName) HeaderText="Last Name"></GridColumn>
                                <GridColumn Field=@nameof(ManageUser.Email) HeaderText="Email"></GridColumn>
                                <GridColumn Field=@nameof(ManageUser.Division) HeaderText="Division"></GridColumn>
                                <GridColumn Field=@nameof(ManageUser.Position) HeaderText="Position"></GridColumn>
                                <GridColumn Field=@nameof(ManageUser.Role) HeaderText="Role"></GridColumn>
                                <GridColumn HeaderText="Action">
                                    <Template>
                                        @{
                                            var user = (context as ManageUser);
                                            <div>
                                                <button type="button" class="btn btn-primary btn-sm" style="text-align: center" @onclick="()=>EditClicked(user!)"><i class="bi bi-pencil"></i> Edit </button>
                                                <button type="button" class="btn btn-danger btn-sm" style="text-align: center" @onclick="()=>DeleteClicked(user!)"><i class="bi bi-trash"></i> Delete </button>
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>

                    </div>
                    <div class="card-footer">
                    </div>
                </div>
            </div>
        </div>
    </div>

  
}
<UserDialog @ref="userDialog"
 HandleSaveOperationEvent="HandleSaveOperationEvent"
 ManageUser="ManageUser"
 SystemRoles="SystemRoles"/>

@code {
    private SfGrid<ManageUser>? DefaultGrid;
    UserDialog? userDialog;
    ManageUser ManageUser = new();
    public List<ManageUser> ManageUsers { get; set; } = new();
    public List<SystemRole> SystemRoles { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        allState.Action += StateHasChanged;
    }

    private async Task GetUsers() => ManageUsers = await accountService.GetUsers();

    private async Task GetRoles() => SystemRoles = await accountService.GetRoles();

    void OpenDialog() => userDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(ManageUser manageUser)
    {
        var result = await accountService.UpdateUser(manageUser);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ManageUser = new();
            await GetUsers();
        }
    }

    private void EditClicked(ManageUser user)
    {
        ManageUser = user;
        OpenDialog();
    }

    private async Task DeleteClicked(ManageUser user)
    {
        bool confirm = await dialogService.ConfirmAsync($"You are going to delete {user.Role} {user.FirstName} {user.LastName}, are you sure?", "Confirm Delete");
        if (!confirm) return;

        var response = await accountService.DeleteUser(user.UserId);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetUsers();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success!");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExportToExcelAsync()!;
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}