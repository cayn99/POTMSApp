@page "/accounting/accountingapproval"
@implements IDisposable
@if (allState.ShowAccountingApproval)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card shadow-lg border-info">
                    <div class="card-header">
                        <h4 class="float-start">For Budget Approval</h4>
                        <button class="btn btn-success float-end" @onclick="OpenDialog">
                            <i class="bi bi-plus-circle-dotted"></i> Input Details for Budget Approval 
                        </button>
                    </div>                
                        <div class="card-body">
                            @{
                                var Tool = (new List<string>() { "Search" });
                            }
                        <SfGrid DataSource="@AccountingApprovals" AllowPaging="true" AllowSorting="true" Toolbar=@Tool @ref="DefaultGrid">
                                <GridPageSettings PageSize="5"></GridPageSettings>
                                <GridEvents TValue="AccountingApproval"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field=@nameof(AccountingApproval.DateReceived) HeaderText="Date Received"></GridColumn>
                                    <GridColumn Field=@nameof(AccountingApproval.ReceivedBy) HeaderText="Received By"></GridColumn>
                                    <GridColumn Field=@nameof(AccountingApproval.AStatus) HeaderText="Status"></GridColumn>
                                    <GridColumn Field=@nameof(AccountingApproval.FirstPayment) HeaderText="First Payment"></GridColumn>
                                    <GridColumn Field=@nameof(AccountingApproval.SecondPayment) HeaderText="Second Payment"></GridColumn>
                                    <GridColumn Field=@nameof(AccountingApproval.ThirdPayment) HeaderText="Third Payment"></GridColumn>
                                    <GridColumn Field=@nameof(AccountingApproval.FourthPayment) HeaderText="Fourth Payment"></GridColumn>
                                    <GridColumn HeaderText="Action">
                                        <Template>
                                            @{
                                                var accountingApproval = (context as AccountingApproval);
                                                <div>
                                                <button type="button" class="btn btn-primary btn-sm" style="text-align: center" @onclick="()=>EditClicked(accountingApproval!)"><i class="bi bi-pencil"></i> Edit </button>
                                                <button type="button" class="btn btn-danger btn-sm" style="text-align: center" @onclick="()=>DeleteClicked(accountingApproval!)"><i class="bi bi-trash"></i> Delete </button>
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>

                        </div>
                        <div class="card-footer">

                        </div>
                    </div>
                </div>
            </div>
        </div>

}
<AccountingApprovalDialog @ref="accountingApprovalDialog"
HandleSaveOperationEvent="HandleSaveOperationEvent"
AccountingApproval="AccountingApproval" />
@code {
    private SfGrid<AccountingApproval>? DefaultGrid;
    AccountingApprovalDialog? accountingApprovalDialog;
    AccountingApproval AccountingApproval = new AccountingApproval
        {
            ReceivedBy = string.Empty
        };
    public string Title { get; set; } = "Add";
    public List<AccountingApproval> AccountingApprovals { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetAccountingApprovals();
        allState.Action += StateHasChanged;
    }

    private async Task GetAccountingApprovals() => AccountingApprovals = await accountingApprovalService.GetAll(Constants.AccountingApprovalBaseUrl);

    void OpenDialog() => accountingApprovalDialog?.OpenDialog();


    private async Task HandleSaveOperationEvent(AccountingApproval accountingApproval)
    {
        bool successCheck = false;
        if (AccountingApproval.Id > 0)
        {
            var result = await accountingApprovalService.Update(accountingApproval, Constants.AccountingApprovalBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await accountingApprovalService.Insert(accountingApproval, Constants.AccountingApprovalBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            AccountingApproval AccountingApproval = new AccountingApproval
                {
                    ReceivedBy = string.Empty
                };
            await GetAccountingApprovals();
            accountingApprovalDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(AccountingApproval accountingApproval)
    {
        accountingApprovalDialog?.ChangeTitle("Update");
        AccountingApproval = accountingApproval;
        OpenDialog();
    }

    private async Task DeleteClicked(AccountingApproval accountingApproval)
    {
        bool confirm = await dialogService.ConfirmAsync($"You are going to delete details with the ID #{AccountingApproval.Id}, are you sure?", "Confirm Delete");
        if (!confirm) return;

        var response = await accountingApprovalService.DeleteById(accountingApproval.Id, Constants.AccountingApprovalBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetAccountingApprovals();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success!");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged;  
}