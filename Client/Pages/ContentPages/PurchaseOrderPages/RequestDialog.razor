<SfDialog Width="800px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogEvents OnOpen="OpenDialog"></DialogEvents>
    <DialogTemplates>
        <Header> @Title Request </Header>
        <Content>
            <EditForm Model="Request" Enhance OnSubmit="Save">
                <div class="card border-success">
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Record Number</label>
                            <InputNumber @bind-Value="Request.RecordNumber" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Division</label>
                            <InputText @bind-Value="Request.Division" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Project Code</label>
                            <InputText @bind-Value="Request.ProjectCode" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Fund Source</label>
                            <InputText @bind-Value="Request.FundSource" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Date Received</label>
                            <InputDate @bind-Value="Request.DateReceived" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Request Number</label>
                            <InputNumber @bind-Value="Request.RequestNumber" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Request Date</label>
                            <InputDate @bind-Value="Request.RequestDate" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Order Number</label>
                            <InputNumber @bind-Value="Request.OrderNumber" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Order Date</label>
                            <InputDate @bind-Value="Request.OrderDate" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Supplier</label>
                            <InputText @bind-Value="Request.Supplier" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Particulars</label>
                            <InputTextArea @bind-Value="Request.Particulars" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Requestor</label>
                            <InputText @bind-Value="Request.Requestor" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Amount</label>
                            <InputNumber @bind-Value="Request.Amount" class="form-control" />
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="SAVE" Type="ButtonType.Submit" IsPrimary="true" OnClick="Save"/>
    </DialogButtons>
</SfDialog>
@code {
    [Parameter]
    public Request Request { get; set; } = new Request
    {
        RecordNumber = 0, // Set an appropriate initial value
        Division = string.Empty,
        ProjectCode = string.Empty,
        FundSource = string.Empty,
        DateReceived = DateTime.Now, // Or some other default date
        RequestNumber = 0, // Set an appropriate initial value
        RequestDate = DateTime.Now, // Or some other default date
        OrderNumber = 0, // Set an appropriate initial value
        OrderDate = DateTime.Now, // Or some other default date
        Supplier = string.Empty,
        Particulars = string.Empty,
        Requestor = string.Empty,
        Amount = 0m // Set an appropriate default value for decimal
    };
    [Parameter] public EventCallback<Request> HandleSaveOperationEvent { get; set; }
    private bool IsVisible { get; set; } = false;
    public string Title { get; set; } = "Add";
    public void OpenDialog()
    {
        IsVisible = true;
        Request.DateReceived = DateTime.Now;
        Request.RequestDate = DateTime.Now;
        Request.OrderDate = DateTime.Now;
        StateHasChanged();
    }

    async void Save()
    {
        // Validate input fields
        if (Request.RecordNumber == 0)
        {
            await dialogService.
            AlertAsync("You need to provide Request's Record Number.", "Alert!");
            return;
        }

        if (string.IsNullOrEmpty(Request.Division))
        {
            await dialogService.AlertAsync("Division is required.", "Alert!");
            return;
        }

        if (string.IsNullOrEmpty(Request.Division))
        {
            await dialogService.AlertAsync("Division is required.", "Alert!");
            return;
        }
        if (string.IsNullOrEmpty(Request.ProjectCode))
        {
            await dialogService.AlertAsync("Project Code is required.", "Alert!");
            return;
        }
        if (string.IsNullOrEmpty(Request.FundSource))
        {
            await dialogService.AlertAsync("Fund Source is required.", "Alert!");
            return;
        }
        if (Request.RequestNumber == 0)
        {
            await dialogService.AlertAsync("Request Number is required.", "Alert!");
            return;
        }
        if (Request.OrderNumber == 0)
        {
            await dialogService.AlertAsync("Order Number is required.", "Alert!");
            return;
        }
        if (string.IsNullOrEmpty(Request.Supplier))
        {
            await dialogService.AlertAsync("Supplier is required.", "Alert!");
            return;
        }
        if (string.IsNullOrEmpty(Request.Particulars))
        {
            await dialogService.AlertAsync("State the Particulars.", "Alert!");
            return;
        }
        if (string.IsNullOrEmpty(Request.Requestor))
        {
            await dialogService.AlertAsync("Requestor is required.", "Alert!");
            return;
        }
        if (Request.Amount <= 0)
        {
            await dialogService.AlertAsync("Amount must be greater than zero.", "Alert!");
            return;
        }
        await HandleSaveOperationEvent.InvokeAsync(Request); // Triggers the save and calls DisplayMessage
    }

    public void ChangeTitle(string title)
    {
        Title = title;
    }
}
