<SfDialog Width="800px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogEvents OnOpen="OpenDialog"></DialogEvents>
    <DialogTemplates>
        <Header> @Title Budget Approval Details </Header>
        <Content>
            <EditForm Model="AccountingApproval" Enhance OnSubmit="Save">
                <div class="card border-success">
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Request Receive Date</label>
                            <InputDate @bind-Value="AccountingApproval.DateReceived" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Received By</label>
                            <InputText @bind-Value="AccountingApproval.ReceivedBy" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Status</label>
                            <InputSelect @bind-Value="AccountingApproval.Status" class="form-control">
                                @foreach (var status in Enum.GetValues(typeof(BaseLibrary.Entities.AccountingApproval.AStatus)))
                                {
                                    <option value="@status">@GetStatusDisplayName((BaseLibrary.Entities.AccountingApproval.AStatus)status)</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-group">
                            <label class="form-label">First Payment</label>
                            <InputNumber @bind-Value="AccountingApproval.FirstPayment" class="form-control"
                                         @oninput="EnableSecondPayment" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Second Payment</label>
                            <InputNumber @bind-Value="AccountingApproval.SecondPayment" class="form-control"
                                         @oninput="EnableThirdPayment" disabled="@(!IsSecondPaymentEnabled)" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Third Payment</label>
                            <InputNumber @bind-Value="AccountingApproval.ThirdPayment" class="form-control"
                                         @oninput="EnableFourthPayment" disabled="@(!IsThirdPaymentEnabled)" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Fourth Payment</label>
                            <InputNumber @bind-Value="AccountingApproval.FourthPayment" class="form-control"
                                         disabled="@(!IsFourthPaymentEnabled)" />
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="SAVE" Type="ButtonType.Submit" IsPrimary="true" OnClick="Save" />
    </DialogButtons>
</SfDialog>
@code {
    [Parameter]
    public AccountingApproval AccountingApproval { get; set; } = new AccountingApproval
        {
            ReceivedBy = string.Empty
        };
    [Parameter] public EventCallback<AccountingApproval> HandleSaveOperationEvent { get; set; }
    private bool IsVisible { get; set; } = false;
    public string Title { get; set; } = "Add";

    // Properties to manage enabled/disabled states
    private bool IsFirstPaymentEnabled { get; set; } = false;
    private bool IsSecondPaymentEnabled { get; set; } = false;
    private bool IsThirdPaymentEnabled { get; set; } = false;
    private bool IsFourthPaymentEnabled { get; set; } = false;

    public void OpenDialog()
    {
        IsVisible = true;
        AccountingApproval.DateReceived = DateTime.Now;

        // Reset all states
        IsFirstPaymentEnabled = false;
        IsSecondPaymentEnabled = false;
        IsThirdPaymentEnabled = false;
        IsFourthPaymentEnabled = false;

        // Reset the values of the payments
        AccountingApproval.FirstPayment = 0;
        AccountingApproval.SecondPayment = 0;
        AccountingApproval.ThirdPayment = 0;
        AccountingApproval.FourthPayment = 0;

        StateHasChanged();
    }

    // Event handler to enable second payment when the first payment is greater than 0
    private void EnableSecondPayment(ChangeEventArgs e)
    {
        var value = Convert.ToDecimal(e.Value);
        AccountingApproval.FirstPayment = value;

        // If FirstPayment is cleared, reset all fields to zero and disable them
        if (value == 0)
        {
            AccountingApproval.SecondPayment = 0;
            AccountingApproval.ThirdPayment = 0;
            AccountingApproval.FourthPayment = 0;

            IsSecondPaymentEnabled = false;
            IsThirdPaymentEnabled = false;
            IsFourthPaymentEnabled = false;
        }
        else
        {
            IsSecondPaymentEnabled = true;
        }

        StateHasChanged();
    }

    // Event handler to enable third payment when the second payment is greater than 0
    private void EnableThirdPayment(ChangeEventArgs e)
    {
        var value = Convert.ToDecimal(e.Value);
        AccountingApproval.SecondPayment = value;

        // If SecondPayment is cleared, reset all fields to zero and disable them
        if (value == 0)
        {
            AccountingApproval.ThirdPayment = 0;
            AccountingApproval.FourthPayment = 0;

            IsThirdPaymentEnabled = false;
            IsFourthPaymentEnabled = false;
        }
        else
        {
            IsThirdPaymentEnabled = true;
        }

        StateHasChanged();
    }

    // Event handler to enable fourth payment when the third payment is greater than 0
    private void EnableFourthPayment(ChangeEventArgs e)
    {
        var value = Convert.ToDecimal(e.Value);
        AccountingApproval.ThirdPayment = value;

        // If ThirdPayment is cleared, reset the FourthPayment to zero and disable it
        if (value == 0)
        {
            AccountingApproval.FourthPayment = 0;
            IsFourthPaymentEnabled = false;
        }
        else
        {
            IsFourthPaymentEnabled = true;
        }

        StateHasChanged();
    }

    private string GetStatusDisplayName(BaseLibrary.Entities.AccountingApproval.AStatus status)
    {
        switch (status)
        {
            case BaseLibrary.Entities.AccountingApproval.AStatus.PaidFull:
                return "Paid (Full Payment)";
            case BaseLibrary.Entities.AccountingApproval.AStatus.PaidPartial:
                return "Paid (Partial Payment)";
            case BaseLibrary.Entities.AccountingApproval.AStatus.Unpaid:
                return "Unpaid";
            default:
                return status.ToString();
        }
    }

    async void Save()
    {
        if (string.IsNullOrEmpty(AccountingApproval.ReceivedBy))
        {
            await dialogService.AlertAsync("This field is required.", "Alert!");
            return;
        }
        await HandleSaveOperationEvent.InvokeAsync(AccountingApproval); // Triggers the save and calls DisplayMessage
    }

    public void ChangeTitle(string title)
    {
        Title = title;
    }
}
