<SfDialog Width="800px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogEvents OnOpen="OpenDialog"></DialogEvents>
    <DialogTemplates>
        <Header> @Title Delivery Details </Header>
        <Content>
            <EditForm Model="OrderReceived" Enhance OnSubmit="Save">
                <div class="card border-success">
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Id</label>
                            <input @bind="OrderReceived.Id" class="form-control" disabled />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Date Received</label>
                            <InputDate @bind-Value="OrderReceived.DateReceived" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Delivery Days</label>
                            <InputNumber @bind-Value="OrderReceived.DeliveryDays" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Extension Letter</label>
                            <input type="file" @onchange="async e => await OnFileSelected(e)" class="form-control" />
                        </div>
                        <div class="form-group mt-3 mb-3">
                            <label class="form-label">Select Delivery Details</label>

                            @if (OrderReceived.OrderDelivery != null)
                            {
                                int selected = OrderReceived.OrderDelivery!.Id;
                                <SfDropDownList TValue="int" TItem="OrderDelivery" Placeholder="@selected.ToString()" DataSource="OrderDeliveries">
                                    <DropDownListFieldSettings Value="Id" Text="Id"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="int" TItem="OrderDelivery" ValueChange="OnValueChange"></DropDownListEvents>
                                </SfDropDownList>
                            }
                            else
                            {
                                <SfDropDownList TValue="int" TItem="OrderDelivery" Placeholder="Select Delivery Details" DataSource="OrderDeliveries">
                                    <DropDownListFieldSettings Value="Id" Text="Id"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="int" TItem="OrderDelivery" ValueChange="OnValueChange"></DropDownListEvents>
                                </SfDropDownList>
                            }
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="SAVE" Type="ButtonType.Submit" IsPrimary="true" OnClick="Save" />
    </DialogButtons>
</SfDialog>
@code {
    [Parameter] public OrderReceived OrderReceived { get; set; } = new();
    [Parameter] public List<OrderDelivery> OrderDeliveries { get; set; } = new();
    [Parameter] public EventCallback<OrderReceived> HandleSaveOperationEvent { get; set; }

    private bool IsVisible { get; set; } = false;
    public string Title { get; set; } = "Add";
    public void OpenDialog()
    {
        IsVisible = true;
        OrderReceived.DateReceived = DateTime.Now;
        StateHasChanged();
    }

    async void Save()
    {
        if (OrderReceived.DeliveryDays == 0)
            await dialogService.
            AlertAsync("You need to provide Request's Record Number.", "Alert!");
        else
            await HandleSaveOperationEvent.InvokeAsync(OrderReceived);
    }

    public void ChangeTitle(string title)
    {
        Title = title;
    }

   private async Task OnFileSelected(ChangeEventArgs e)
{
    var fileInput = e.Value as InputFileChangeEventArgs;

    if (fileInput != null)
    {
        // Example: Handling the selected file asynchronously (such as uploading the file).
        var file = fileInput.File;
        
        // For instance, you might read the file's content (asynchronously).
        var fileContent = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(fileContent);
        
        // Process the fileContent, e.g., uploading, saving, etc.
        // Example: await yourMethodToProcessFile(fileContent);
    }
}

    public void OnValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, OrderDelivery> args)
    {
        OrderReceived.OrderDeliveryId = args.Value;
    }
}
