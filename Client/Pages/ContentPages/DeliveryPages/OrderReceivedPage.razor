@page "/delivery/orderreceived"
@implements IDisposable
@if (allState.ShowOrderReceived)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card shadow-lg border-info">
                    <div class="card-header">
                        <h4 class="float-start">Received Orders</h4>
                        <button class="btn btn-success float-end" @onclick="OpenDialog">
                            <i class="bi bi-plus-circle-dotted"></i> Input Details for Received Orders
                        </button>
                    </div>
                    <div class="card-body">
                        @{
                            var Tool = (new List<string>() { "Search" });
                        }
                        <SfGrid DataSource="@OrdersReceived" AllowPaging="true" AllowSorting="true" Toolbar=@Tool @ref="DefaultGrid">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridEvents TValue="OrderReceived"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(OrderReceived.DateReceived) HeaderText="Date Received"></GridColumn>
                                <GridColumn Field=@nameof(OrderReceived.DeliveryDays) HeaderText="Days of Delivery"></GridColumn>
                                <GridColumn Field=@nameof(OrderReceived.ExtensionLetterFileName) HeaderText="Extension Letter"></GridColumn>
                                <GridColumn HeaderText="Action">
                                    <Template>
                                        @{
                                            var orderReceived = (context as OrderReceived);
                                            <div>
                                                <button type="button" class="btn btn-primary btn-sm" style="text-align: center" @onclick="()=>EditClicked(orderReceived!)"><i class="bi bi-pencil"></i> Edit </button>
                                                <button type="button" class="btn btn-danger btn-sm" style="text-align: center" @onclick="()=>DeleteClicked(orderReceived!)"><i class="bi bi-trash"></i> Delete </button>
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>

                    </div>
                    <div class="card-footer">
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<OrderReceivedDialog @ref="orderReceivedDialog"
HandleSaveOperationEvent="HandleSaveOperationEvent"
OrderReceived="OrderReceived"
OrderDeliveries="OrderDeliveries"/>
@code {
    private SfGrid<OrderReceived>? DefaultGrid;
    OrderReceivedDialog? orderReceivedDialog;
    OrderReceived OrderReceived = new();
    public string Title { get; set; } = "Add";
    public List<OrderReceived> OrdersReceived { get; set; } = new();
    public List<OrderDelivery> OrderDeliveries { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetOrdersReceived();
        await GetOrderDeliveries();
        allState.Action += StateHasChanged;
    }

    private async Task GetOrdersReceived() => OrdersReceived = await orderReceivedService.GetAll(Constants.OrderReceivedBaseUrl);
    private async Task GetOrderDeliveries() => OrderDeliveries = await orderDeliveryService.GetAll(Constants.OrderDeliveryBaseUrl);

    void OpenDialog() => orderReceivedDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(OrderReceived orderReceived)
    {
        bool successCheck = false;
        if (OrderReceived.Id > 0)
        {
            var result = await orderReceivedService.Update(orderReceived, Constants.OrderReceivedBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await orderReceivedService.Insert(orderReceived, Constants.OrderReceivedBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            OrderReceived OrderReceived = new();
            await GetOrdersReceived();
            orderReceivedDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(OrderReceived orderReceived)
    {
        orderReceivedDialog?.ChangeTitle("Update");
        OrderReceived = orderReceived;
        OpenDialog();
    }

    private async Task DeleteClicked(OrderReceived orderReceived)
    {
        bool confirm = await dialogService.ConfirmAsync($"You are going to delete received delivery ID #{orderReceived.Id}, are you sure?", "Confirm Delete");
        if (!confirm) return;

        var response = await orderReceivedService.DeleteById(orderReceived.Id, Constants.OrderDeliveryBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetOrderDeliveries();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success!");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
