@using BaseLibrary.Entities
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@inject SfDialogService dialogService

<SfDialog Width="800px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogEvents OnOpen="OpenDialog"></DialogEvents>
    <DialogTemplates>
        <Header> Add Request </Header>
        <Content>
            <EditForm Model="Requests" Enhance OnSubmit="Save">
                <div class="card border-success">
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Record Number</label>
                            <InputNumber @bind-Value="Requests.RecordNumber" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Division</label>
                            <InputText @bind-Value="Requests.Division" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Project Code</label>
                            <InputText @bind-Value="Requests.ProjectCode" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Fund Source</label>
                            <InputText @bind-Value="Requests.FundSource" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Date Received</label>
                            <InputDate @bind-Value="Requests.DateReceived" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Request Number</label>
                            <InputNumber @bind-Value="Requests.RequestNumber" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Request Date</label>
                            <InputDate @bind-Value="Requests.RequestDate" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Order Number</label>
                            <InputNumber @bind-Value="Requests.OrderNumber" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Order Date</label>
                            <InputDate @bind-Value="Requests.OrderDate" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Supplier</label>
                            <InputText @bind-Value="Requests.Supplier" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Particulars</label>
                            <InputTextArea @bind-Value="Requests.Particulars" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Requestor</label>
                            <InputText @bind-Value="Requests.Requestor" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Amount</label>
                            <InputNumber @bind-Value="Requests.Amount" class="form-control" />
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="SAVE" Type="ButtonType.Submit" IsPrimary="true" OnClick="Save"/>
    </DialogButtons>
</SfDialog>
@code {
    [Parameter] public Request Requests { get; set; } = new Request
    {
        Division = string.Empty,
        ProjectCode = string.Empty,
        FundSource = string.Empty,
        Supplier = string.Empty,
        Particulars = string.Empty,
        Requestor = string.Empty
    };

    private bool IsVisible { get; set; } = false;

    public void OpenDialog()
    {
        IsVisible = true;
        Requests.DateReceived = DateTime.Now;
        Requests.RequestDate = DateTime.Now;
        Requests.OrderDate = DateTime.Now;
        StateHasChanged();
    }
   
    async void Save()
    {
        // Validate input fields
        if (Requests.RecordNumber == 0)
        {
            await dialogService.AlertAsync("You need to provide Request's Record Number.", "Alert!");
            return;
        }
        if (string.IsNullOrEmpty(Requests.Division))
        {
            await dialogService.AlertAsync("Division is required.", "Alert!");
            return;
        }
        if (string.IsNullOrEmpty(Requests.ProjectCode))
        {
            await dialogService.AlertAsync("Project Code is required.", "Alert!");
            return;
        }
        if (string.IsNullOrEmpty(Requests.FundSource))
        {
            await dialogService.AlertAsync("Fund Source is required.", "Alert!");
            return;
        }
        if (Requests.RequestNumber == 0)
        {
            await dialogService.AlertAsync("Request Number is required.", "Alert!");
            return;
        }
        if (Requests.OrderNumber == 0)
        {
            await dialogService.AlertAsync("Order Number is required.", "Alert!");
            return;
        }
        if (string.IsNullOrEmpty(Requests.Supplier))
        {
            await dialogService.AlertAsync("Supplier is required.", "Alert!");
            return;
        }
        if (string.IsNullOrEmpty(Requests.Particulars))
        {
            await dialogService.AlertAsync("State the Particulars.", "Alert!");
            return;
        }
        if (string.IsNullOrEmpty(Requests.Requestor))
        {
            await dialogService.AlertAsync("Requestor is required.", "Alert!");
            return;
        }
        if (Requests.Amount <= 0)
        {
            await dialogService.AlertAsync("Amount must be greater than zero.", "Alert!");
            return;
        }
    }
}
