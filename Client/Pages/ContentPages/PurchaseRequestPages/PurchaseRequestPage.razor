@page "/purchaserequest"
@implements IDisposable
@if (allState.ShowPurchaseRequest)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card shadow-lg border-dark">
                    <div class="card-header">
                        <h4 class="float-start">Purchase Requests</h4>
                        <button class="btn btn-success float-end" @onclick="OpenDialog">
                            <i class="bi bi-plus-circle-dotted"></i> Input Purchase Request Details
                        </button>
                    </div>
                    <div class="card-body">
                        @{
                            var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print"});
                        }
                        <SfGrid DataSource="@PurchaseRequests" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true" AllowPdfExport="true"
                        @ref="DefaultGrid">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="PurchaseRequest"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(PurchaseRequest.PrNumber) HeaderText="PR Number"></GridColumn>
                                <GridColumn Field=@nameof(PurchaseRequest.ProjectCode) HeaderText="Project Code"></GridColumn>
                                <GridColumn Field=@nameof(PurchaseRequest.Requestor) HeaderText="Requestor"></GridColumn>
                                <GridColumn Field=@nameof(PurchaseRequest.Division) HeaderText="Division"></GridColumn>
                                <GridColumn HeaderText="Action">
                                    <Template>
                                        @{
                                            var purchaseRequest = (context as PurchaseRequest);
                                            <div>
                                                <button type="button" class="btn btn-info btn-sm" style="text-align: center"
                                                @onclick="()=>InfoClicked(purchaseRequest!)"><i class="bi bi-info-circle"></i> Info
                                                </button>
                                                <button type="button" class="btn btn-primary btn-sm" style="text-align: center" 
                                                @onclick="()=>EditClicked(purchaseRequest!)"><i class="bi bi-pencil"></i> Edit
                                                </button>
                                                <button type="button" class="btn btn-danger btn-sm" style="text-align: center" 
                                                @onclick="()=>DeleteClicked(purchaseRequest!)"><i class="bi bi-trash"></i> Delete
                                                </button>
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>

                    </div>
                    <div class="card-footer">
                    </div>
                </div>
            </div>
        </div>
    </div>


}

<PurchaseRequestDetailsPage PurchaseRequestDetails="PurchaseRequest"
ShowDetailsPage="ShowDetailsPage"
HandleDetailsPageCloseButtonClicked="HandleDetailsPageCloseButtonClicked"/>

<PurchaseRequestDialog @ref="purchaseRequestDialog"
HandleSaveOperationEvent="HandleSaveOperationEvent"
PurchaseRequest="PurchaseRequest" />
@code {
    private SfGrid<PurchaseRequest>? DefaultGrid;
    PurchaseRequestDialog? purchaseRequestDialog;
    PurchaseRequest PurchaseRequest = new();
    public string Title { get; set; } = "Add";
    public List<PurchaseRequest> PurchaseRequests { get; set; } = new();
    public PurchaseRequest SelectedPurchaseRequest { get; set; } = new();
    public bool ShowPurchaseRequestPage { get; set; } = true;


    protected async override Task OnInitializedAsync()
    {
        await GetPurchaseRequests();
        allState.Action += StateHasChanged;
    }

    private async Task GetPurchaseRequests() => PurchaseRequests = await purchaseRequestService.GetAll(Constants.PurchaseRequestBaseUrl);

    void OpenDialog() => purchaseRequestDialog?.OpenDialog();
    

    private async Task HandleSaveOperationEvent(PurchaseRequest purchaseRequest)
    {
        bool successCheck = false;
        if (PurchaseRequest.Id > 0)
        {
            var result = await purchaseRequestService.Update(purchaseRequest, Constants.PurchaseRequestBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await purchaseRequestService.Insert(purchaseRequest, Constants.PurchaseRequestBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            PurchaseRequest PurchaseRequest = new();
            await GetPurchaseRequests();
            purchaseRequestDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(PurchaseRequest purchaseRequest)
    {
        purchaseRequestDialog?.ChangeTitle("Update");
        PurchaseRequest = purchaseRequest;
        OpenDialog();
    }

    private async Task DeleteClicked(PurchaseRequest purchaseRequest)
    {
        bool confirm = await dialogService.ConfirmAsync($"You are going to delete record #{purchaseRequest.PrNumber}, are you sure?", "Confirm Delete");
        if (!confirm) return;

        var response = await purchaseRequestService.DeleteById(purchaseRequest.Id, Constants.PurchaseRequestBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetPurchaseRequests();
    }

    public bool ShowDetailsPage { get; set; } = false;
    private void InfoClicked(PurchaseRequest purchaseRequest)
    {
        PurchaseRequest = purchaseRequest;
        ShowDetailsPage = true;
        ShowPurchaseRequestPage = false;
        // SelectedRequest = new();
    }

    void HandleDetailsPageCloseButtonClicked()
    {
        ShowDetailsPage = false;
        ShowPurchaseRequestPage = true;
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success!");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExportToExcelAsync()!;

        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.ExportToPdfAsync()!;
        if (args.Item.Text == "Print")
            await this.DefaultGrid!.PrintAsync()!;
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
